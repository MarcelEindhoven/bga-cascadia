/**
 *------
 * BGA framework: Gregory Isabelli & Emmanuel Colin & BoardGameArena
 * Cascadia implementation : © Marcel van Nieuwenhoven marcel.eindhoven@hotmail.com
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 *
 * cascadiacannonfodder.css
 *
 * CascadiaCannonFodder stylesheet
 *
 */

/*
    This is the CSS stylesheet of your game User Interface.
    
    Styles defined on this file will be applied to the HTML elements you define in your
    HTML template (cascadiacannonfodder_cascadiacannonfodder.tpl), and to HTML elements you create dynamically
    (in cascadiacannonfodder.js).
    
    Usually, you are using CSS to:
    
    1°) define the overall layout of your game
        (ex: place the board on the top left, place player's hand beside, place the deck on the right, ...).

    2°) create your CSS-sprites:
        All images of your games should be gathered into a small number of image files. Then, using
        background-image and background-position CSS properties, you create HTML blocks that can 
        display these images correctly (see example below).
    
    3°) ... anything else:
        It is really easy to add and remove CSS classes dynamically from your Javascript with
        dojo.addClass and dojo.removeClass. It is also easy to check if an element has a class
        (dojo.hasClass) or to get all elements with a specific class (dojo.query). This is why,
        very often, using CSS classes for the logic of your user interface allow you to do complex
        thing easily.
        
        
     Note: on the production platform, this file will be compressed and comments will be removed.
           Consequently, don't hesitate to put as many comments as necessary.
*/


/* Note: you must not use any @import directive */


/********* You can start writing your CSS below this line: **********/


/*
    Example of CSS sprites (a black token and a white token, 20x20px each, embedded in the same "tokens.png" 40x20px image):

    .white_token {
        background-image: url('img/tokens.png');
        background-position: 0px 0px;
    }
    .black_token {
        background-image: url('img/tokens.png');
        background-position: -20px 0px;
    }
    .token {
        width: 20px;
        height: 20px;
        background-repeat: none;
    }
*/

.field {
    width: 50px;
    height: 50px;
    position: relative;
    background-color: rgb(190, 190, 90);
    clip-path: polygon(6.7% 25%, 50% 0%, 93.3% 25%, 93.3% 75%, 50% 100%, 6.7% 75%);
}
.upper_half {
    width: 50px;
    height: 50px;
    position: relative;
    background-color: rgb(90, 190, 103);
    clip-path: polygon(6.7% 25%, 93.3% 75%, 50% 100%, 6.7% 75%);
}
.token {
    width: 30px;
    height: 40px;
    position: relative;
    opacity: 0.7;
}
.wildlife {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    position: relative;
}
.field_wildlife {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    position: relative;
    background-color: rgb(90, 0, 8);
}
.field1 {
    background-color: rgb(0, 12, 180);
}
.field2 {
    background-color: rgb(50, 180, 100);
}
.field3 {
    background-color: rgb(2, 75, 57);
}
.field4 {
    background-color: rgb(233, 236, 10);
}
.field5 {
    background-color: rgb(116, 91, 91);
}
.wildlife1 {
    background-color: rgb(46, 12, 7);
}
.wildlife2 {
    background-color: rgb(212, 159, 12);
}
.wildlife3 {
    background-color: rgb(247, 5, 8);
}
.wildlife4 {
    background-color: rgb(101, 192, 214);
}
.wildlife5 {
    background-color: rgb(243, 93, 6);
}
.rotate0 {
    transform: rotate(0deg);
}
.rotate1 {
    transform: rotate(60deg);
}
.rotate2 {
    transform: rotate(120deg);
}
.rotate3 {
    transform: rotate(180deg);
}
.rotate4 {
    transform: rotate(-120deg);
}
.rotate5 {
    transform: rotate(-60deg);
}

.token3 {
    clip-path: polygon(0% 0%, 100% 0%, 50% 100%);
}

.subscribe {
    visibility: hidden;
}

.selectable {
    animation: blink-animation 1s steps(5, start) infinite;
    -webkit-animation: blink-animation 1s steps(5, start) infinite;
  }
@keyframes blink-animation {
    to {
      visibility: hidden;
    }
}
 @-webkit-keyframes blink-animation {
    to {
      visibility: hidden;
    }
}




